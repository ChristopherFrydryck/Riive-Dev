{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec,\n    _class,\n    _jsxFileName = \"/Users/christopherfrydryck/Documents/Dev/Riive-Dev/riive/components/SpacesList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"./Txt\";\nimport Colors from \"../constants/Colors\";\nimport Icon from \"./Icon\";\nimport * as Font from 'expo-font';\nimport { FontAwesome, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { inject, observer } from 'mobx-react/native';\n\nfunction cacheFonts(fonts) {\n  return fonts.map(function (font) {\n    return Font.loadAsync(font);\n  });\n}\n\nvar SpacesList = (_dec = inject('ComponentStore'), _dec(_class = observer(_class = function (_React$Component) {\n  _inherits(SpacesList, _React$Component);\n\n  var _super = _createSuper(SpacesList);\n\n  function SpacesList() {\n    _classCallCheck(this, SpacesList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SpacesList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var iconAssets;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              iconAssets = cacheFonts([FontAwesome.font, MaterialCommunityIcons.font]);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Promise.all(_toConsumableArray(iconAssets)));\n\n            case 3:\n              this.props.ComponentStore.spotsLoaded = true;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.ComponentStore.spotsLoaded) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }\n        }, \"Hello.\");\n      } else {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }\n        }, \"Loading...\");\n      }\n    }\n  }]);\n\n  return SpacesList;\n}(React.Component)) || _class) || _class);\nexport default SpacesList;","map":{"version":3,"sources":["/Users/christopherfrydryck/Documents/Dev/Riive-Dev/riive/components/SpacesList.js"],"names":["React","Text","Colors","Icon","Font","FontAwesome","MaterialCommunityIcons","inject","observer","cacheFonts","fonts","map","font","loadAsync","SpacesList","iconAssets","Promise","all","props","ComponentStore","spotsLoaded","Component"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,IAAP;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,WAAT,EAAsBC,sBAAtB,QAAoD,oBAApD;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,mBAAjC;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACtB,SAAOA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI;AAAA,WAAIR,IAAI,CAACS,SAAL,CAAeD,IAAf,CAAJ;AAAA,GAAd,CAAP;AACH;;IAKKE,U,WAFLP,MAAM,CAAC,gBAAD,C,gBACNC,Q;;;;;;;;;;;;;;;;;;;AAIaO,cAAAA,U,GAAaN,UAAU,CAAC,CAACJ,WAAW,CAACO,IAAb,EAAmBN,sBAAsB,CAACM,IAA1C,CAAD,C;;+CACvBI,OAAO,CAACC,GAAR,oBAAgBF,UAAhB,E;;;AACN,mBAAKG,KAAL,CAAWC,cAAX,CAA0BC,WAA1B,GAAwC,IAAxC;;;;;;;;;;;6BAGI;AACJ,UAAG,KAAKF,KAAL,CAAWC,cAAX,CAA0BC,WAA7B,EAAyC;AACzC,eACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ;AAEE,OAHF,MAGM;AACF,eACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ;AAGH;AACJ;;;;EAjBoBpB,KAAK,CAACqB,S;AAoB/B,eAAeP,UAAf","sourcesContent":["import React from 'react'\r\nimport { View, StyleSheet, TouchableHighlight, Dimensions } from 'react-native';\r\nimport Text from './Txt'\r\nimport Colors from '../constants/Colors'\r\nimport Icon from './Icon'\r\nimport * as Font from 'expo-font'\r\nimport { FontAwesome, MaterialCommunityIcons } from '@expo/vector-icons'\r\nimport { inject, observer } from 'mobx-react/native';\r\n\r\n\r\n\r\nfunction cacheFonts(fonts){\r\n    return fonts.map(font => Font.loadAsync(font))\r\n}\r\n\r\n\r\n@inject('ComponentStore')\r\n@observer\r\nclass SpacesList extends React.Component{\r\n\r\n    async componentDidMount(){\r\n        const iconAssets = cacheFonts([FontAwesome.font, MaterialCommunityIcons.font])\r\n        await Promise.all([...iconAssets])\r\n        this.props.ComponentStore.spotsLoaded = true;\r\n    }\r\n\r\n    render(){\r\n        if(this.props.ComponentStore.spotsLoaded){\r\n        return(\r\n            <Text>Hello.</Text>\r\n        )}else{\r\n            return(\r\n                <Text>Loading...</Text>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default SpacesList"]},"metadata":{},"sourceType":"module"}