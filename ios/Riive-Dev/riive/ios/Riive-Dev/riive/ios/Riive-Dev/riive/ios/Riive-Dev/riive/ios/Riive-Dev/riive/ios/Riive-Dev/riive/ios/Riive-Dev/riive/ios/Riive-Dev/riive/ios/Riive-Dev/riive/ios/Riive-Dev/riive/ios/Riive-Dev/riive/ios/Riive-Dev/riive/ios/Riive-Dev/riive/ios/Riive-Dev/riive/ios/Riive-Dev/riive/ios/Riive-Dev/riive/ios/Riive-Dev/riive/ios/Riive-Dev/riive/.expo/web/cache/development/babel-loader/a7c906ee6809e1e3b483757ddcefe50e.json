{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/christopherfrydryck/Documents/Dev/Riive-Dev/riive/node_modules/react-native-svg-animated-linear-gradient/src/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Svg, { Circle, ClipPath, G, LinearGradient, Rect, Defs, Stop } from 'react-native-svg';\nvar AnimatedSvg = Animated.createAnimatedComponent(Svg);\n\nvar _require = require('d3-interpolate'),\n    interpolate = _require.interpolate;\n\nvar SvgAnimatedLinearGradient = function (_Component) {\n  _inherits(SvgAnimatedLinearGradient, _Component);\n\n  var _super = _createSuper(SvgAnimatedLinearGradient);\n\n  function SvgAnimatedLinearGradient(props) {\n    var _this;\n\n    _classCallCheck(this, SvgAnimatedLinearGradient);\n\n    _this = _super.call(this, props);\n    var initialOffsetValues = props.offset ? [1, 1 + props.offset / 2, 1 + props.offset] : [1, 1.5, 2];\n    _this.state = {\n      initialOffsetValues: initialOffsetValues,\n      offsetValues: [].concat(initialOffsetValues).reverse().map(function (v) {\n        return String(v * -1);\n      }),\n      offsets: ['0.0001', '0.0002', '0.0003'],\n      frequence: props.duration / 2\n    };\n    _this._isMounted = false;\n    _this._animate = new Animated.Value(0);\n    _this.loopAnimation = _this.loopAnimation.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SvgAnimatedLinearGradient, [{\n    key: \"offsetValueBound\",\n    value: function offsetValueBound(x) {\n      if (x > 1) {\n        return '1';\n      }\n\n      if (x < 0) {\n        return '0';\n      }\n\n      return x;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount(props) {\n      this._isMounted = true;\n      this.loopAnimation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"loopAnimation\",\n    value: function loopAnimation() {\n      var _this2 = this;\n\n      if (!this._isMounted) return;\n      var interpolator = interpolate(this.state, {\n        offsetValues: this.state.initialOffsetValues.map(function (v) {\n          return String(v);\n        })\n      });\n      var start = Date.now();\n\n      this._animation = function () {\n        var now = Date.now();\n        var t = (now - start) / _this2.props.duration;\n\n        if (t > 1) {\n          t = 1;\n        }\n\n        var newState = interpolator(t);\n        var offsetValues = [];\n        offsetValues[0] = _this2.offsetValueBound(newState.offsetValues[0]);\n        offsetValues[1] = _this2.offsetValueBound(newState.offsetValues[1]);\n        offsetValues[2] = _this2.offsetValueBound(newState.offsetValues[2]);\n\n        if (offsetValues[0] !== offsetValues[1] || offsetValues[0] !== offsetValues[2] || offsetValues[1] !== offsetValues[2]) {\n          _this2._isMounted && _this2.setState({\n            offsets: offsetValues\n          });\n        }\n\n        if (t < 1) {\n          requestAnimationFrame(_this2._animation);\n        }\n      };\n\n      requestAnimationFrame(this._animation);\n      Animated.sequence([Animated.timing(this._animate, {\n        toValue: 1,\n        duration: this.state.frequence\n      }), Animated.timing(this._animate, {\n        toValue: 0,\n        duration: this.state.frequence\n      })]).start(function (event) {\n        if (event.finished) {\n          _this2.loopAnimation();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AnimatedSvg, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }), React.createElement(Defs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, React.createElement(LinearGradient, {\n        id: \"grad\",\n        x1: this.props.x1,\n        y1: this.props.y1,\n        x2: this.props.x2,\n        y2: this.props.y2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, React.createElement(Stop, {\n        offset: this.state.offsets[0],\n        stopColor: this.props.primaryColor,\n        stopOpacity: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }\n      }), React.createElement(Stop, {\n        offset: this.state.offsets[1],\n        stopColor: this.props.secondaryColor,\n        stopOpacity: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }\n      }), React.createElement(Stop, {\n        offset: this.state.offsets[2],\n        stopColor: this.props.primaryColor,\n        stopOpacity: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }\n      })), React.createElement(ClipPath, {\n        id: \"clip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, React.createElement(G, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }\n      }, this.props.children))), React.createElement(Rect, {\n        x: \"0\",\n        y: \"0\",\n        height: this.props.height,\n        width: this.props.width,\n        fill: \"url(#grad)\",\n        clipPath: \"url(#clip)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return SvgAnimatedLinearGradient;\n}(Component);\n\nexport { SvgAnimatedLinearGradient as default };\nSvgAnimatedLinearGradient.propTypes = {\n  primaryColor: PropTypes.string,\n  secondaryColor: PropTypes.string,\n  duration: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  x1: PropTypes.string,\n  y1: PropTypes.string,\n  x2: PropTypes.string,\n  y2: PropTypes.string\n};\nSvgAnimatedLinearGradient.defaultProps = {\n  primaryColor: '#eeeeee',\n  secondaryColor: '#dddddd',\n  duration: 2000,\n  width: 300,\n  height: 200,\n  x1: '0',\n  y1: '0',\n  x2: '100%',\n  y2: '0',\n  offset: 1\n};","map":{"version":3,"sources":["/Users/christopherfrydryck/Documents/Dev/Riive-Dev/riive/node_modules/react-native-svg-animated-linear-gradient/src/index.js"],"names":["React","Component","PropTypes","Svg","Circle","ClipPath","G","LinearGradient","Rect","Defs","Stop","AnimatedSvg","Animated","createAnimatedComponent","require","interpolate","SvgAnimatedLinearGradient","props","initialOffsetValues","offset","state","offsetValues","reverse","map","v","String","offsets","frequence","duration","_isMounted","_animate","Value","loopAnimation","bind","x","interpolator","start","Date","now","_animation","t","newState","offsetValueBound","setState","requestAnimationFrame","sequence","timing","toValue","event","finished","x1","y1","x2","y2","primaryColor","secondaryColor","children","height","width","propTypes","string","number","oneOfType","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types'\nimport {View, StyleSheet, Animated} from 'react-native';\n\n//import Expo, { Svg } from 'expo';\nimport Svg, {\n    Circle,\n    ClipPath,\n    G,\n    LinearGradient,\n    Rect,\n    Defs,\n    Stop\n}  from 'react-native-svg';\n\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\nconst {interpolate} = require('d3-interpolate');\n\nexport default class SvgAnimatedLinearGradient extends Component {\n    constructor(props) {\n        super(props);\n\n        const initialOffsetValues = props.offset\n            ? [1, 1 + props.offset / 2, 1 + props.offset]\n            : [1, 1.5, 2];\n        this.state = {\n            initialOffsetValues,\n            offsetValues: [...initialOffsetValues].reverse().map(v => String(v * -1)),\n            offsets: [\n                '0.0001', '0.0002', '0.0003' // Avoid duplicate value cause error in Android\n            ],\n            frequence: props.duration / 2\n        }\n        this._isMounted = false;\n        this._animate = new Animated.Value(0)\n        this.loopAnimation = this\n            .loopAnimation\n            .bind(this)\n    }\n    offsetValueBound(x) {\n        if (x > 1) {\n            return '1'\n        }\n        if (x < 0) {\n            return '0'\n        }\n        return x\n    }\n    componentDidMount(props) {\n        this._isMounted = true\n        this.loopAnimation()\n    }\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n    loopAnimation() {\n        if (!this._isMounted) return;\n        // setup interpolate\n        let interpolator = interpolate(this.state, {\n            offsetValues: this.state.initialOffsetValues.map(v => String(v))\n        });\n\n        // start animation\n        let start = Date.now();\n        this._animation = () => {\n            const now = Date.now();\n            let t = (now - start) / this.props.duration;\n            if (t > 1) {\n                t = 1\n            }\n\n            let newState = interpolator(t);\n            let offsetValues = [];\n            offsetValues[0] = this.offsetValueBound(newState.offsetValues[0]);\n            offsetValues[1] = this.offsetValueBound(newState.offsetValues[1]);\n            offsetValues[2] = this.offsetValueBound(newState.offsetValues[2]);\n            \n            // Make sure at least two offsets is different\n            if (offsetValues[0] !== offsetValues[1] || offsetValues[0] !==  offsetValues[2] || offsetValues[1] !== offsetValues[2]) {\n                this._isMounted && this.setState({offsets: offsetValues});\n            }\n            if (t < 1) {\n                requestAnimationFrame(this._animation);\n            }\n        }\n        requestAnimationFrame(this._animation);\n\n        // Setup loop animation\n        Animated.sequence([\n            Animated.timing(this._animate, {\n                toValue: 1,\n                duration: this.state.frequence\n            }),\n            Animated.timing(this._animate, {\n                toValue: 0,\n                duration: this.state.frequence\n            })\n        ]).start((event) => {\n            if (event.finished) {\n                this.loopAnimation()\n            }\n        })\n    }\n    render() {\n\n        return (\n            <AnimatedSvg {...this.props}>\n                <Defs>\n                    <LinearGradient id=\"grad\" x1={this.props.x1} y1={this.props.y1} x2={this.props.x2} y2={this.props.y2}>\n                        <Stop\n                            offset={this.state.offsets[0]}\n                            stopColor={this.props.primaryColor}\n                            stopOpacity=\"1\"/>\n                        <Stop\n                            offset={this.state.offsets[1]}\n                            stopColor={this.props.secondaryColor}\n                            stopOpacity=\"1\"/>\n                        <Stop\n                            offset={this.state.offsets[2]}\n                            stopColor={this.props.primaryColor}\n                            stopOpacity=\"1\"/>\n                    </LinearGradient>\n                    <ClipPath id=\"clip\">\n                        <G>\n                            {this.props.children}\n                        </G>\n                    </ClipPath>\n                </Defs>\n\n                <Rect\n                    x=\"0\"\n                    y=\"0\"\n                    height={this.props.height}\n                    width={this.props.width}\n                    fill=\"url(#grad)\"\n                    clipPath=\"url(#clip)\"/>\n            </AnimatedSvg>\n        );\n    }\n}\nSvgAnimatedLinearGradient.propTypes = {\n    primaryColor: PropTypes.string,\n    secondaryColor: PropTypes.string,\n    duration: PropTypes.number,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    x1: PropTypes.string,\n    y1: PropTypes.string,\n    x2: PropTypes.string,\n    y2: PropTypes.string,\n}\nSvgAnimatedLinearGradient.defaultProps = {\n    primaryColor: '#eeeeee',\n    secondaryColor: '#dddddd',\n    duration: 2000,\n    width: 300,\n    height: 200,\n    x1: '0',\n    y1: '0',\n    x2: '100%',\n    y2: '0',\n    offset: 1,\n}\n"]},"metadata":{},"sourceType":"module"}