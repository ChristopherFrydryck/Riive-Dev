{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/christopherfrydryck/Documents/Dev/Riive-Dev/riive/components/Txt.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport * as Font from 'expo-font';\n\nvar Txt = function (_React$Component) {\n  _inherits(Txt, _React$Component);\n\n  var _super = _createSuper(Txt);\n\n  function Txt() {\n    var _this;\n\n    _classCallCheck(this, Txt);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.setFontType = function (type) {\n      switch (type) {\n        case 'black':\n          return 'WorkSans-Black';\n\n        case 'bold':\n          return 'WorkSans-Bold';\n\n        case 'extraBold':\n          return 'WorkSans-ExtraBold';\n\n        case 'semiBold':\n          return 'WorkSans-SemiBold';\n\n        case 'medium':\n          return 'WorkSans-Medium';\n\n        case 'italic':\n          return 'WorkSans-Italic';\n\n        case 'light':\n          return 'WorkSans-Light';\n\n        case 'extraLight':\n          return 'WorkSans-ExtraLight';\n\n        case 'thin':\n          return 'WorkSans-Thin';\n\n        default:\n          return 'WorkSans-Regular';\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Txt, [{\n    key: \"render\",\n    value: function render() {\n      var font = this.setFontType(this.props.type ? this.props.type : 'normal');\n      var style = [{\n        fontFamily: font\n      }, this.props.style || {}];\n\n      var allProps = _extends({}, this.props, {\n        style: style\n      });\n\n      return React.createElement(Text, _extends({}, allProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 24\n        }\n      }), \" \", this.props.children, \" \");\n    }\n  }]);\n\n  return Txt;\n}(React.Component);\n\nexport default Txt;","map":{"version":3,"sources":["/Users/christopherfrydryck/Documents/Dev/Riive-Dev/riive/components/Txt.js"],"names":["React","Font","Txt","setFontType","type","font","props","style","fontFamily","allProps","children","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;IAIMC,G;;;;;;;;;;;;;;;;UAGFC,W,GAAc,UAACC,IAAD,EAAU;AACpB,cAAQA,IAAR;AACI,aAAK,OAAL;AACI,iBAAO,gBAAP;;AACJ,aAAK,MAAL;AACI,iBAAO,eAAP;;AACJ,aAAK,WAAL;AACI,iBAAO,oBAAP;;AACJ,aAAK,UAAL;AACI,iBAAO,mBAAP;;AACJ,aAAK,QAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,QAAL;AACI,iBAAO,iBAAP;;AACJ,aAAK,OAAL;AACI,iBAAO,gBAAP;;AACJ,aAAK,YAAL;AACI,iBAAO,qBAAP;;AACJ,aAAK,MAAL;AACI,iBAAO,eAAP;;AACJ;AACI,iBAAO,kBAAP;AApBR;AAuBH,K;;;;;;;6BAGO;AACJ,UAAMC,IAAI,GAAG,KAAKF,WAAL,CAAiB,KAAKG,KAAL,CAAWF,IAAX,GAAkB,KAAKE,KAAL,CAAWF,IAA7B,GAAoC,QAArD,CAAb;AACA,UAAMG,KAAK,GAAG,CAAC;AAAEC,QAAAA,UAAU,EAAEH;AAAd,OAAD,EAAsB,KAAKC,KAAL,CAAWC,KAAX,IAAoB,EAA1C,CAAd;;AACA,UAAME,QAAQ,GAAG,SAAc,EAAd,EAAkB,KAAKH,KAAvB,EAA6B;AAACC,QAAAA,KAAK,EAACA;AAAP,OAA7B,CAAjB;;AAGQ,aAAO,oBAAC,IAAD,eAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,KAAKH,KAAL,CAAWI,QAAjC,MAAP;AAKX;;;;EAzCaV,KAAK,CAACW,S;;AA4CxB,eAAeT,GAAf","sourcesContent":["import React from 'react'\r\nimport { Text, StyleSheet, ActivityIndicator} from 'react-native'\r\nimport * as Font from 'expo-font'\r\n\r\n\r\n\r\nclass Txt extends React.Component{ \r\n    \r\n\r\n    setFontType = (type) => {\r\n        switch (type) {\r\n            case 'black':\r\n                return 'WorkSans-Black'\r\n            case 'bold':\r\n                return 'WorkSans-Bold'\r\n            case 'extraBold':\r\n                return 'WorkSans-ExtraBold'\r\n            case 'semiBold':\r\n                return 'WorkSans-SemiBold'\r\n            case 'medium':\r\n                return 'WorkSans-Medium'\r\n            case 'italic':\r\n                return 'WorkSans-Italic'\r\n            case 'light':\r\n                return 'WorkSans-Light'\r\n            case 'extraLight':\r\n                return 'WorkSans-ExtraLight'    \r\n            case 'thin':\r\n                return 'WorkSans-Thin'    \r\n            default:\r\n                return 'WorkSans-Regular'\r\n        }\r\n\r\n    }\r\n\r\n \r\n    render(){\r\n        const font = this.setFontType(this.props.type ? this.props.type : 'normal')\r\n        const style = [{ fontFamily: font}, this.props.style || {}]\r\n        const allProps = Object.assign({}, this.props,{style:style})\r\n       \r\n          \r\n                return(<Text {...allProps}> {this.props.children} </Text>)\r\n                \r\n           \r\n            \r\n        \r\n    }\r\n}\r\n\r\nexport default Txt;"]},"metadata":{},"sourceType":"module"}